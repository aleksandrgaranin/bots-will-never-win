{"version":3,"sources":["useFetchJobs.js","components/Jobs/JobElement/JobElement.js","components/Jobs/Jobs.js","components/SearchForm/SearchForm.js","components/JPagination/JPagination.js","App.js","reportWebVitals.js","index.js"],"names":["ACTIONS","BASE_URL","AROUND_CORS","reducer","state","action","type","loading","jobs","payload","error","hasNextPage","JobElement","props","Modal","size","aria-labelledby","centered","Header","closeButton","Title","id","job","title","Body","style","color","company","Badge","className","variant","location","wordBreak","source","how_to_apply","description","Footer","Button","onClick","onHide","Jobs","useState","modalShow","setModalShow","modalJob","setModalJob","isAscendingString","setIsAscendingString","isAscendingDate","setIsAscendingDate","unsortedJobs","setUnsortedJobs","useEffect","cloneDeep","showModalHandler","sorted","sortByStringhandler","event","sortKey","sort","a","b","ta","trim","toLowerCase","tb","Table","striped","bordered","hover","responsive","e","cursor","textAlign","Date","da","map","created_at","toLocaleDateString","show","SearchForm","params","onParamChange","Form","Row","Group","as","Col","Label","Control","onChange","value","name","Check","full_time","label","xs","JPagination","page","setPage","adjustPageHandler","amount","prevPage","Pagination","Prev","Item","Ellipsis","active","Next","App","setParams","useReducer","dispatch","cancelTokenData","axios","CancelToken","get","cancelToken","token","markdown","then","res","data","catch","err","isCancel","cancelTokenPage","length","cancel","useFetchJobs","jobElement","Container","backgroundColor","padding","param","target","console","log","prevParanms","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0ab8c6b3.chunk.js","sourcesContent":["import { useReducer, useEffect } from 'react';\nimport axios from 'axios';\n\nconst ACTIONS = {\n    MAKE_REQUEST: 'make-request',\n    GET_DATA: 'get-data',\n    ERROR: 'error',\n    UPDATE_HAS_NEXT_PAGE: \"update-has-next-page\"\n}\nconst LOCAL_PROXY = \"http://127.0.0.1:8080/\"\nconst AROUND_CORS = 'https://cors-anywhere.herokuapp.com/'\nconst BASE_URL = AROUND_CORS + 'https://jobs.github.com/positions.json'\n// const BASE_URL = LOCAL_PROXY + 'https://jobs.github.com/positions.json'\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case ACTIONS.MAKE_REQUEST:\n            return { loading: true, jobs: [] }\n        case ACTIONS.GET_DATA:\n            return { ...state, loading: false, jobs: action.payload.jobs }\n        case ACTIONS.ERROR:\n            return { ...state, loading: false, error: action.payload.error, jobs: [] }\n        case ACTIONS.UPDATE_HAS_NEXT_PAGE:\n            return { ...state, hasNextPage: action.payload.hasNextPage }\n        default: return state\n    }\n}\n\n\nexport default function useFetchJobs(params, page) {\n    const [state, dispatch] = useReducer(reducer, { jobs: [], loading: true })\n    useEffect(() => {\n        const cancelTokenData = axios.CancelToken.source()\n        dispatch({ type: ACTIONS.MAKE_REQUEST })\n        axios.get(BASE_URL, {\n            cancelToken: cancelTokenData.token,\n            params: { markdown: true, page: page, ...params }\n        }).then(res => {\n            dispatch({ type: ACTIONS.GET_DATA, payload: { jobs: res.data } })\n        }).catch(err => {\n            if (axios.isCancel(err)) return\n            dispatch({ type: ACTIONS.ERROR, payload: { error: err } })\n        })\n\n        const cancelTokenPage = axios.CancelToken.source()\n        axios.get(BASE_URL, {\n            cancelToken: cancelTokenPage.token,\n            params: { markdown: true, page: page + 1, ...params }\n        }).then(res => {\n            dispatch({ type: ACTIONS.UPDATE_HAS_NEXT_PAGE, payload: { hasNextPage: res.data.length !== 0 } })\n        }).catch(err => {\n            if (axios.isCancel(err)) return\n            dispatch({ type: ACTIONS.ERROR, payload: { error: err } })\n        })\n        return () => {\n            cancelTokenData.cancel()\n            cancelTokenPage.cancel()\n        }\n    }, [params, page])\n    return state\n}","\nimport React from 'react';\nimport { Badge, Button, Modal } from 'react-bootstrap';\nimport ReactMarkdown from 'react-markdown'\n\nconst JobElement = (props) => {\n    return (\n        <Modal\n            {...props}\n            size=\"lg\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n        >\n            <Modal.Header closeButton>\n                <Modal.Title id=\"contained-modal-title-vcenter\">\n                    {props.job.title}\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <h5 style={{ color: 'darkgreen' }}>\"{props.job.company}\"</h5>\n                <Badge className=\"mr-1 mb-2\" variant=\"secondary\">{props.job.location}</Badge>\n                <Badge className=\"mr-1 mb-2\" variant=\"success\">{props.job.type}</Badge>\n                <br />\n                <hr/>\n                <div style={{wordBreak: 'break-all'}}>\n                    <p style={{color:'darkblue'}}>How to aply:</p>\n                    <ReactMarkdown source={props.job.how_to_apply} />\n                </div>\n                <hr/>\n                <div  style={{wordBreak: 'break-all'}}>\n                    <ReactMarkdown source={props.job.description} />\n                </div>\n\n            </Modal.Body>\n            <Modal.Footer>\n                <Button onClick={props.onHide}>Close</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nexport default JobElement","import React, { useEffect, useState } from 'react';\nimport Table from 'react-bootstrap/Table';\nimport { Badge } from 'react-bootstrap'\nimport JobElement from './JobElement/JobElement'\nimport cloneDeep from 'clone-deep';\n\nconst Jobs = ({ jobs }) => {\n    const [modalShow, setModalShow] = useState(false);\n    const [modalJob, setModalJob] = useState({})\n    const [isAscendingString, setIsAscendingString] = useState(0)\n    const [isAscendingDate, setIsAscendingDate] = useState(0)\n    const [unsortedJobs, setUnsortedJobs] = useState()\n\n    useEffect(() => {\n        setUnsortedJobs(cloneDeep(jobs))\n    }, []);\n\n    // console.log(\"unsorted\", unsortedJobs)\n    const showModalHandler = (job) => {\n        setModalJob(job)\n        setModalShow(true)\n    }\n\n    const closeModal = () => {\n        setModalShow(false)\n    }\n\n    let sorted = unsortedJobs\n\n    const sortByStringhandler = (event, sortKey) => {\n        if (isAscendingString === 0) {\n            sorted = unsortedJobs.sort((a, b) => {\n                let ta = a[sortKey].trim().toLowerCase(),\n                    tb = b[sortKey].trim().toLowerCase();\n                if (ta < tb) {\n                    return -1;\n                }\n                if (ta > tb) {\n                    return 1;\n                }\n            })\n            setIsAscendingString(1)\n        } else if (isAscendingString === 1) {\n            sorted = unsortedJobs.sort((a, b) => {\n                let ta = a[sortKey].trim().toLowerCase(),\n                    tb = b[sortKey].trim().toLowerCase();\n                if (ta > tb) {\n                    return -1;\n                }\n                if (ta < tb) {\n                    return 1;\n                }\n            })\n            setIsAscendingString(2)\n        } else if (isAscendingString === 2) {\n            setIsAscendingString(0)\n            setUnsortedJobs(cloneDeep(jobs))\n        }\n    }\n\n    const sortByDateHandler = (event, sortKey) => {\n        if (isAscendingDate === 0) {\n            sorted = unsortedJobs.sort((a, b) => {\n                let da = new Date(a[sortKey]),\n                    db = new Date(b[sortKey]);\n                return da - db;\n            })\n            setIsAscendingDate(1)\n        } else if (isAscendingDate === 1) {\n            sorted = unsortedJobs.sort((a, b) => {\n                let da = new Date(a[sortKey]),\n                    db = new Date(b[sortKey]);\n                return db - da;\n            })\n            setIsAscendingDate(2)\n        } else if (isAscendingDate === 2) {\n            setIsAscendingDate(0)\n            setUnsortedJobs(cloneDeep(jobs))\n        }\n    }\n\n    return (\n        <div>\n            <Table striped bordered hover variant=\"dark\" responsive>\n                <thead>\n                    <tr>\n                        <th\n                            onClick={e => sortByStringhandler(e, 'title')}\n                            style={{ cursor: 'pointer', textAlign: 'center' }}\n                        >Title </th>\n                        <th\n                            onClick={e => sortByStringhandler(e, 'company')}\n                            style={{ cursor: 'pointer', textAlign: 'center' }}\n                        >Company Name</th>\n                        <th\n                            onClick={e => sortByDateHandler(e, 'created_at')}\n                            style={{ cursor: 'pointer', textAlign: 'center' }}\n                        >Date</th>\n                        <th\n                            onClick={e => sortByStringhandler(e, 'location')}\n                            style={{ cursor: 'pointer', textAlign: 'center' }}\n                        >Location</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {sorted ? sorted.map(job => {\n                        return (\n                            <tr key={job.id} onClick={() => showModalHandler(job)} style={{ cursor: 'pointer' }}>\n                                <td>\n                                    {job.title}\n                                    <br />\n                                    <Badge className=\"m-1 mb-2\" variant=\"success\">{job.type}</Badge></td>\n                                <td>{job.company}</td>\n                                <td>{new Date(job.created_at).toLocaleDateString()}</td>\n                                <td>{job.location}</td>\n                            </tr>\n                        )\n                    }) : jobs.map(job => {\n                        return (\n                            <tr key={job.id} onClick={() => showModalHandler(job)} style={{ cursor: 'pointer' }}>\n                                <td>\n                                    {job.title}\n                                    <br />\n                                    <Badge className=\"m-1 mb-2\" variant=\"success\">{job.type}</Badge>\n                                </td>\n                                <td>{job.company}</td>\n                                <td>{new Date(job.created_at).toLocaleDateString()}</td>\n                                <td>{job.location}</td>\n                            </tr>\n                        )\n                    })}\n                </tbody>\n\n            </Table>\n            <JobElement\n                job={modalJob}\n                show={modalShow}\n                onHide={closeModal}\n            />\n        </div>\n    )\n}\nexport default Jobs;\n\n","import React from 'react';\nimport { Form, Col } from 'react-bootstrap';\n\nconst SearchForm = ({ params, onParamChange }) => {\n    return (\n        <Form className=\"mb-4\">\n            <Form.Row >\n                <Form.Group as={Col}>\n                    <Form.Label>Search by Description</Form.Label>\n                    <Form.Control onChange={onParamChange} value={params.description} name=\"description\" type=\"text\" />\n                    <Form.Check onChange={onParamChange} value={params.full_time} name=\"full_time\" id=\"full-time\" label=\"Only Full Time\" type=\"checkbox\" className=\"mt-2\" />\n                </Form.Group>\n                <Form.Group xs=\"auto\" className=\"ml-2\">\n                </Form.Group>\n                <Form.Group as={Col}>\n                    <Form.Label>Search by Location</Form.Label>\n                    <Form.Control onChange={onParamChange} value={params.location} name=\"location\" type=\"text\" />\n                </Form.Group>\n            </Form.Row>\n        </Form>\n    )\n}\n\nexport default SearchForm","import React from 'react';\nimport { Pagination } from 'react-bootstrap'\n\nconst JPagination = ({ page, setPage, hasNextPage }) => {\n\n    const adjustPageHandler = (amount) => {\n        setPage(prevPage => prevPage + amount)\n    }\n\n    return (\n        <Pagination>\n            {page !== 1 && <Pagination.Prev onClick={() => adjustPageHandler(-1)} />}\n            {page !== 1 && <Pagination.Item onClick={() => adjustPageHandler(-page + 1)}>1</Pagination.Item>}\n            {page > 2 && <Pagination.Ellipsis />}\n            {page > 2 && <Pagination.Item onClick={() => adjustPageHandler(-1)}>{page - 1}</Pagination.Item>}\n            <Pagination.Item active>{page}</Pagination.Item>\n            {hasNextPage && <Pagination.Item onClick={() => adjustPageHandler(1)}>{page + 1}</Pagination.Item>}\n            {hasNextPage && <Pagination.Next onClick={() => adjustPageHandler(1)} />}\n        </Pagination>\n    )\n}\n\nexport default JPagination","import React, { useState } from 'react';\nimport useFetchJobs from './useFetchJobs';\nimport { Container } from 'react-bootstrap';\nimport Jobs from './components/Jobs/Jobs'\nimport SearchForm from './components/SearchForm/SearchForm';\nimport JPagination from './components/JPagination/JPagination'\n\n\n\nfunction App() {\n  const [params, setParams] = useState({})\n  const [page, setPage] = useState(1)\n  const { jobs, loading, error, hasNextPage } = useFetchJobs(params, page)\n\n  const paramChangeHandler = (event) => {\n    const param = event.target.name\n    const value = event.target.value\n    console.log(param, value)\n    // setPage(1)\n    setParams(prevParanms => {\n      return { ...prevParanms, [param]: value }\n    })\n  }\n\n\n  let jobElement = null\n\n  if (loading) {\n    jobElement = (\n      <h2 style={{ textAlign: 'center', color: 'blue' }}>...loading...</h2>\n    )\n  } else {\n    jobElement = (\n\n\n      <div>\n        <JPagination page={page} setPage={setPage} hasNextPage={hasNextPage} />\n        <Jobs jobs={jobs} />\n        <JPagination page={page} setPage={setPage} hasNextPage={hasNextPage} />\n      </div>\n\n    )\n  }\n\n  return (\n    <div>\n      <Container style={{ backgroundColor: 'lightgray', padding: '25px' }}>\n        <h2 style={{ textAlign: 'center', color: 'darkblue' }}> Jobs from GitHub API</h2>\n        {error && <h2>Error...something went wrong. Please reload the page!!!</h2>}\n        <SearchForm params={params} onParamChange={paramChangeHandler} ></SearchForm>\n        {jobElement}\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  \n    <App />,\n  \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}